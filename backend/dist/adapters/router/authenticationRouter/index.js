"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const controller_1 = require("../../controller");
const passport_1 = __importDefault(require("passport"));
const utils_1 = require("../../../utils");
exports.default = (dependencies) => {
    const router = (0, express_1.default)();
    const { registrationController, otpController, loginController, forgotPasswordController, checkOtpController, updatePasswordController, resendOtpController, updateProfileController, googleRegisterController, refreshTokenController, addInnovationController, getPostController, likedController, commentController, reportController, addProductController, getCreatorsController, getProductsController, editPostController, editProductController, deletePostController, statusProductController, commentReplyController, pinCommentController, addtocartController, removecartitemController, razorpayController, orderController, allorderController, allMessagesController, getConversationsController, createConverstationController, getConverstationByIdController, updateOrderStatusController, cancelOrderController, reviewController, dialogflowController, markMessagesAsReadController, allListNumberController, reviewEditController, paymentStatusController, } = (0, controller_1.userController)(dependencies);
    router.post('/login', loginController);
    router.post('/register', registrationController);
    router.post('/verifyOtp', otpController);
    router.post('/forgotPassword', forgotPasswordController);
    router.post('/checkOtp', checkOtpController);
    router.put('/resetPassword', updatePasswordController);
    router.post('/resendOtp', resendOtpController);
    router.put('/updateProfile', updateProfileController);
    router.get('/google', passport_1.default.authenticate('google', { scope: ['profile', 'email'] }));
    router.get('/google/callback', passport_1.default.authenticate('google'), googleRegisterController);
    router.post('/refresh-token', refreshTokenController);
    router.post('/innovation', utils_1.upload.fields([{ name: 'images' }, { name: 'video' }]), addInnovationController);
    router.get('/posts', getPostController);
    router.post('/liked', likedController);
    router.post('/comment', commentController);
    router.post('/report', reportController);
    router.put('/editIdea', utils_1.upload.fields([{ name: 'images' }, { name: 'video' }]), editPostController);
    router.delete('/deleteIdea/:postId', deletePostController);
    router.post('/addProduct', utils_1.upload.fields([{ name: 'images' }]), addProductController);
    router.get('/products', getProductsController);
    router.get('/creators', getCreatorsController);
    router.put('/editProduct', utils_1.upload.fields([{ name: 'images' }]), editProductController);
    router.patch('/deleteProduct/:productId', statusProductController);
    router.post('/reply', commentReplyController);
    router.patch('/pinComment', pinCommentController);
    router.post('/addtocart', addtocartController);
    router.post('/removecartitem', removecartitemController);
    router.post('/order/createOnlineOrder', razorpayController);
    router.post('/order', orderController);
    router.get('/allorders/:userId', allorderController);
    router.get('/messages/:conversationId', allMessagesController);
    router.post('/createConverstation', createConverstationController);
    router.get('/getconversations', getConversationsController);
    router.get('/getConverstationById', getConverstationByIdController);
    router.patch('/updateOrderStatus', updateOrderStatusController);
    router.patch('/cancelOrder', cancelOrderController);
    router.post('/review', reviewController);
    router.post('/dialogflow', dialogflowController);
    router.patch('/markMessagesAsRead', markMessagesAsReadController);
    router.get('/allListNumber', allListNumberController);
    router.post('/reviewEdit', reviewEditController);
    router.post('/paymentStatus', paymentStatusController);
    const { AdminLoginController, getAllUserController, handleUserBlockController, verifyCreativeController, getReportsController, getallOrdersController, createBlogController, allBlogController, deleteBlogController, } = (0, controller_1.adminController)(dependencies);
    router.post('/admin/login', AdminLoginController);
    router.get('/getAllUsers', getAllUserController);
    router.patch('/handleUserBlock/:userId', handleUserBlockController);
    router.patch('/verifyCreative/:userId', verifyCreativeController);
    router.get('/reports', getReportsController);
    router.get('/admin/allorders', getallOrdersController);
    router.post('/admin/createblog', utils_1.upload.single('image'), createBlogController);
    router.get('/allBlogs', allBlogController);
    router.delete('/deleteblog/:id', deleteBlogController);
    return router;
};
